-- Create habits table
create table public.habits (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users not null,
    title text not null,
    description text,
    frequency text not null check (frequency in ('daily', 'weekly', 'monthly')),
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable RLS
alter table public.habits enable row level security;

-- Create policies
create policy "Users can view their own habits"
    on habits for select
    using (auth.uid() = user_id);

create policy "Users can insert their own habits"
    on habits for insert
    with check (auth.uid() = user_id);

create policy "Users can update their own habits"
    on habits for update
    using (auth.uid() = user_id);

create policy "Users can delete their own habits"
    on habits for delete
    using (auth.uid() = user_id);

-- Create habit_logs table for tracking habit completion
create table public.habit_logs (
    id bigint generated by default as identity primary key,
    habit_id bigint references public.habits not null,
    user_id uuid references auth.users not null,
    completed_at timestamp with time zone default timezone('utc'::text, now()) not null,
    notes text
);

-- Enable RLS
alter table public.habit_logs enable row level security;

-- Create policies
create policy "Users can view their own habit logs"
    on habit_logs for select
    using (auth.uid() = user_id);

create policy "Users can insert their own habit logs"
    on habit_logs for insert
    with check (auth.uid() = user_id);

create policy "Users can update their own habit logs"
    on habit_logs for update
    using (auth.uid() = user_id);

create policy "Users can delete their own habit logs"
    on habit_logs for delete
    using (auth.uid() = user_id);

-- Create function to update updated_at timestamp
create or replace function public.handle_updated_at()
returns trigger as $$
begin
    new.updated_at = timezone('utc'::text, now());
    return new;
end;
$$ language plpgsql;

-- Create trigger to automatically update updated_at
create trigger handle_habits_updated_at
    before update on public.habits
    for each row
    execute function public.handle_updated_at();
